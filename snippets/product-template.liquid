<style>
  .inventory-threshold{
    display:none;
  }
  .custom-sales-points{
    color:#f4af29;
  }
   .custom-sales-points .icon--inventory:before{
    background:#f4af29;
  }
     .custom-sales-points .icon--inventory:after{
    background:#f4af29;
  }
  .custom-sales-points-out-ofstock {
    color: #ff6d6d;
  }
   .custom-sales-points-out-ofstock  .icon--inventory:before{
    background: #ff6d6d;
  }
   .custom-sales-points-out-ofstock  .icon--inventory:after{
    background: #ff6d6d;
  }
  label.disabled::after {
    position: absolute !important;
    left: 0 !important;
    top: 50% !important;
    height: 2px !important;
    background: #000 !important;
    content: '' !important;
    width: 100% !important;
    -webkit-transform: rotate(-45deg) !important;
    -ms-transform: rotate(-45deg) !important;
    transform: rotate(-45deg) !important;
  }

  .add-to-cart.btn--tertiary.disabled,
  .add-to-cart.btn--tertiary[disabled] {
    cursor: default;
    color: #444;
    background-color: #f6f6f6;
  }
  .add-to-cart.btn--tertiary {
    border-color: #f6f6f6;
  }
  .btn--full {
    width: 100%;
    transition: none;
    padding: 13px 20px;
  }

  .payment-buttons .btn.iia-disabled-button:not(.custom-disabled-button) {
    display: none;
  }
  .disabled-btn {
    border-color: #f6f6f6 !important;
    cursor: pointer !important;
    display: block;
    color: #444;
  }
  .disabled-btn:hover {
    border-color: #f6f6f6 !important;
    cursor: default !important;
    display: block;
    color: #444;
  }
  .hide {
    display: none !important;
  }

  #inventory-info-app{
    display:none !important;
  }
</style>
{%- liquid
  assign current_variant = product.selected_or_first_available_variant

  assign product_zoom_size = '1800x1800'
  assign product_image_size = '620x'

  assign enableHistory = true
  if isModal
    assign enableHistory = false
  endif

  case image_container_width
    when 'small'
      assign product_image_width = 'medium-up--two-fifths'
      assign product_description_width = 'medium-up--three-fifths'
      assign product_image_size = '480x'
    when 'medium'
      assign product_image_width = 'medium-up--one-half'
      assign product_description_width = 'medium-up--one-half'
      assign product_image_size = '620x'
    when 'large'
      assign product_image_width = 'medium-up--three-fifths'
      assign product_description_width = 'medium-up--two-fifths'
      assign product_image_size = '740x'
  endcase
-%}

<div
  id="ProductSection-{{ section_id }}"
  class="product-section"
  data-section-id="{{ section_id }}"
  data-product-id="{{ product.id }}"
  data-section-type="product-template"
  {% if isModal %}
    data-subsection
  {% endif %}
  {% if product_image_type == 'stacked' %}
    data-images-stacked="true"
  {% endif %}
  data-video-style="{{ video_style }}"
  data-history="{{ enableHistory }}"
  data-modal="{{ isModal }}"
>
  {%- render 'product-template-variables', product: product, current_variant: current_variant -%}
  <div class="page-content">
    <div class="page-width">
      <div class="grid">
        <div class="grid__item {{ product_image_width }}">
          {%- render 'product-images',
            section_id: section_id,
            product: product,
            product_image_type: product_image_type,
            product_zoom_enable: product_zoom_enable,
            product_zoom_size: product_zoom_size,
            product_image_size: product_image_size,
            isModal: isModal,
            video_looping: video_looping,
            video_style: video_style
          -%}
        </div>

        <div class="grid__item {{ product_description_width }}{% if product_image_type == 'stacked' %} product-single__sticky{% endif %}">
          <div class="product-single__meta">
            <div class="product-block product-block--header product-single__header small--text-center">
              {%- if settings.vendor_enable -%}
                <div class="product-single__vendor">
                  {{ product.vendor }}
                </div>
              {%- endif -%}

              {%- if sku_enable -%}
                <p class="product-single__sku" data-sku>
                  {%- if current_variant.sku -%}
                    {{ current_variant.sku }}
                  {%- endif -%}
                </p>
              {%- endif -%}

              {%- if isModal -%}
                <p class="h1 product-single__title">
                  {{ product.title }}
                </p>
              {%- else -%}
                <h1 class="h1 product-single__title">
                  {%- unless product.empty? -%}
                    {{ product.title }}
                  {%- else -%}
                    {{ 'home_page.onboarding.product_title' | t }}
                  {%- endunless -%}
                </h1>
              {%- endif -%}
            </div>
            <a href="#looxReviews">
              <div
                class="loox-rating"
                data-id="{{ product.id }}"
                data-rating="{{ product.metafields.loox.avg_rating }}"
                data-raters="{{ product.metafields.loox.num_reviews }}"
              ></div>
            </a>
            <div data-product-blocks>
              {% capture form_id %}AddToCartForm-{{ section_id }}{% endcapture %}
              {%- if blocks -%}
                {%- for block in blocks -%}
                  {%- case block.type -%}
                    {%- when '@app' -%}
                      {% render block %}
                    {%- when 'reviews' -%}
                      <div class="product-block product-block--small">
                        <a href="#shopify-product-reviews-{{ product.id }}">
                          <span class="shopify-product-reviews-badge" data-id="{{ product.id }}"></span>
                        </a>
                      </div>

                    {%- when 'separator' -%}
                      <div class="product-block"><hr class="hr-separator"></div>
                    {%- when 'text' -%}
                      <div class="product-block" {{ block.shopify_attributes }}>
                        {{ block.settings.text }}
                      </div>
                    {%- when 'tab' -%}
                      <div class="product-block product-block--tab" {{ block.shopify_attributes }}>
                        {% assign tab_id = block.id | append: product.id %}
                        {% capture tab_content %}
                        {{ block.settings.content }}
                        {{ block.settings.page.content }}
                      {% endcapture %}
                        {%- render 'tab', id: tab_id, title: block.settings.title, content: tab_content -%}
                      </div>
                    {%- when 'contact' -%}
                      <div class="product-block product-block--tab" {{ block.shopify_attributes }}>
                        {%- render 'tab-contact', block: block -%}
                      </div>
                    {%- when 'description' -%}
                      <div
                        class="product-block{% if block.settings.is_tab %} product-block--tab{% endif %}"
                        {{ block.shopify_attributes }}
                      >
                        {%- render 'product-description',
                          id: block.id,
                          product: product,
                          is_tab: block.settings.is_tab
                        -%}
                      </div>
                    {%- when 'price' -%}
                      <div class="product-block product-block--price" {{ block.shopify_attributes }}>
                        <div class="product-single__prices">
                          {%- if product.compare_at_price_max > product.price -%}
                            {%- liquid
                              assign hide_sale_price = true
                              if current_variant.compare_at_price
                                assign hide_sale_price = false
                              endif
                            -%}
                            <span
                              class="visually-hidden"
                              aria-hidden="{{ hide_sale_price }}"
                              data-price-a11y
                            >
                              {{ 'products.general.regular_price' | t }}
                            </span>
                            <span class="{% if hide_sale_price %} hide{% endif %}" data-price-wrapper>
                              <span class="product__price product__price--compare" data-product-price-compare>
                                {%- if current_variant.compare_at_price > current_variant.price -%}
                                  {{ current_variant.compare_at_price | money }}
                                {%- endif -%}
                              </span>
                            </span>
                            <span class="visually-hidden" data-compare-a11y>
                              {{- 'products.general.sale_price' | t -}}
                            </span>
                          {%- else -%}
                            <span class="visually-hidden" data-price-a11y>
                              {{- 'products.general.regular_price' | t -}}
                            </span>
                          {%- endif -%}

                          <span
                            class="product__price{% if current_variant.compare_at_price > current_variant.price %} sale-price{% endif %}"
                            data-product-price
                          >
                            {%- unless product.empty? -%}
                              {{ current_variant.price | money }}
                            {%- else -%}
                              {{ 1999 | money }}
                            {%- endunless -%}
                          </span>
                        </div>

                        <div
                          data-product-unit-wrapper
                          class="product__unit-price{% unless current_variant.unit_price_measurement %} hide{% endunless %}"
                        >
                          {%- capture unit_price_base_unit -%}
                          {%- if current_variant.unit_price_measurement -%}
                            {%- if current_variant.unit_price_measurement.reference_value != 1 -%}
                              {{ current_variant.unit_price_measurement.reference_value }}
                            {%- endif -%}
                            {{ current_variant.unit_price_measurement.reference_unit }}
                          {%- endif -%}
                        {%- endcapture -%}

                          {{ current_variant.unit_price | money }}/{{ unit_price_base_unit }}
                        </div>

                        {%- if shop.taxes_included or shop.shipping_policy.body != blank -%}
                          <div class="product__policies rte">
                            {%- if shop.taxes_included -%}
                              {{ 'products.product.include_taxes' | t }}
                            {%- endif -%}
                            {%- if shop.shipping_policy.body != blank -%}
                              {{ 'products.product.shipping_policy_html' | t: link: shop.shipping_policy.url }}
                            {%- endif -%}
                          </div>
                        {%- endif -%}
                      </div>
                    {%- when 'quantity_selector' -%}
                      <div class="product-block" {{ block.shopify_attributes }}>
                        <div class="product__quantity">
                          <label for="Quantity-{{ section_id }}" class="variant__label">
                            {{- 'products.product.quantity' | t -}}
                          </label>
                          <input
                            type="number"
                            id="Quantity-{{ section_id }}"
                            name="quantity"
                            value="1"
                            min="1"
                            form="{{ form_id }}"
                          >
                        </div>
                      </div>
                    {%- when 'variant_picker' -%}
                      <div class="product-block" {{ block.shopify_attributes }}>
                        {%- unless product.has_only_default_variant -%}
                          {%- for option in product.options_with_values -%}
                            {%- if block.settings.color_swatches -%}
                              {%- assign is_color = false -%}
                              {%- assign color_option_index = 0 -%}
                              {%- assign swatch_trigger = 'products.general.color_swatch_trigger' | t | downcase -%}
                              {%- assign color_option_index = forloop.index0 -%}
                              {%- assign downcased_option = option.name | downcase -%}
                              {%- if downcased_option contains swatch_trigger -%}
                                {%- assign is_color = true -%}
                              {%- elsif swatch_trigger == 'color' and downcased_option contains 'colour' -%}
                                {%- assign is_color = true -%}
                              {%- elsif downcased_option contains 'colore' -%}
                                {%- assign is_color = true -%}
                              {%- endif -%}
                            {%- endif -%}
                            <p style="display:none;" class="custom-hidden">{{ swatch_trigger }}</p>
                            <p style="display:none;" class="custom-hidden">{{ downcased_option }}</p>
                            <p style="display:none;" class="custom-hidden">{{ is_color }}</p>
                            {%- if block.settings.picker_type == 'button' -%}
                              {%- render 'variant-button',
                                product: product,
                                form_id: form_id,
                                section_id: section_id,
                                variant_labels: block.settings.variant_labels,
                                option: option,
                                forloop: forloop,
                                is_color: is_color,
                                color_option_index: color_option_index
                              -%}
                            {%- else -%}
                              {%- render 'variant-dropdown',
                                product: product,
                                form_id: form_id,
                                section_id: section_id,
                                variant_labels: block.settings.variant_labels,
                                option: option,
                                forloop: forloop
                              -%}
                            {%- endif -%}
                          {%- endfor -%}
                        {%- endunless -%}
                      </div>
                    {%- when 'buy_buttons' -%}
                      <div class="product-block" {{ block.shopify_attributes }}>
                        {%- unless product.empty? -%}
                          <div class="product-block">
                            {%- render 'product-form',
                              form_id: form_id,
                              section_id: section_id,
                              product: product,
                              show_dynamic_checkout: block.settings.show_dynamic_checkout,
                              current_variant: current_variant
                            -%}
                          </div>
                        {%- endunless -%}

                        {%- if block.settings.surface_pickup_enable -%}
                          <div
                            data-store-availability
                            data-product-name="{{ product.title | escape }}"
                            data-base-url="{{ shop.url }}{{ routes.root_url }}"
                          ></div>
                        {%- endif -%}
                      </div>
                    {%- when 'sales_point' -%}
                      <div class="product-block product-block--sales-point" {{ block.shopify_attributes }}>
                        <ul class="sales-points">
                          <li class="sales-point">
                            <span class="icon-and-text">
                              {% case block.settings.icon %}
                                {% when 'checkmark' %}
                                  <svg
                                    aria-hidden="true"
                                    focusable="false"
                                    role="presentation"
                                    class="icon icon-circle-checkmark"
                                    viewBox="0 0 64 64"
                                  >
                                    <defs>
                                      <style>
                                        .cls-1 {
                                          fill: none;
                                          stroke: #000;
                                          stroke-width: 2px
                                        }
                                      </style>
                                    </defs><path class="cls-1" d="M52.68 24.48A22 22 0 1 1 47 15.93M21 32l8.5 8.5L57 13" />
                                  </svg>
                                {% when 'globe' %}
                                  <svg
                                    aria-hidden="true"
                                    focusable="false"
                                    role="presentation"
                                    class="icon icon-globe"
                                    viewBox="0 0 64 64"
                                  >
                                    <defs>
                                      <style>
                                        .cls-1 {
                                          fill: none;
                                          stroke: #000;
                                          stroke-width: 2px
                                        }
                                      </style>
                                    </defs><circle
                                      class="cls-1"
                                      cx="33"
                                      cy="32"
                                      r="22" /><path class="cls-1" d="M14 21h38M11 32h44M14 43h38M33 10c-12 8-12 37 0 44M33 10c12 8 12 37 0 44" />
                                  </svg>
                                {% when 'leaf' %}
                                  <svg
                                    aria-hidden="true"
                                    focusable="false"
                                    role="presentation"
                                    class="icon icon-leaf"
                                    viewBox="0 0 64 64"
                                  >
                                    <defs>
                                      <style>
                                        .cls-1 {
                                          fill: none;
                                          stroke: #000;
                                          stroke-miterlimit: 10;
                                          stroke-width: 2px
                                        }
                                      </style>
                                    </defs><path class="cls-1" d="M51 12L13 50M35 13v15h16" /><path class="cls-1" d="M52 11c6 24-16.72 47.29-33 32C7 22 29 10 52 11z" />
                                  </svg>
                                {% when 'package' %}
                                  <svg
                                    aria-hidden="true"
                                    focusable="false"
                                    role="presentation"
                                    class="icon icon-package"
                                    viewBox="0 0 64 64"
                                  >
                                    <defs>
                                      <style>
                                        .cls-1 {
                                          fill: none;
                                          stroke: #000;
                                          stroke-width: 2px
                                        }
                                      </style>
                                    </defs><path class="cls-1" d="M32 56L9.05 42.88V22.12L32 9l22.95 13.12v20.76L32 56z" /><path class="cls-1" d="M32 56V35.23l22.95-13.11M32 35.23L9.05 22.12M42.13 14.79L20.52 28.67v8.75" />
                                  </svg>
                                {% when 'lock' %}
                                  <svg
                                    aria-hidden="true"
                                    focusable="false"
                                    role="presentation"
                                    class="icon icon-lock"
                                    viewBox="0 0 64 64"
                                  >
                                    <defs>
                                      <style>
                                        .cls-1 {
                                          fill: none;
                                          stroke: #000;
                                          stroke-width: 2px
                                        }
                                      </style>
                                    </defs><path
                                      id="svg_2"
                                      data-name="svg 2"
                                      class="cls-1"
                                      d="M20.48 24v-3c0-6.6 5.52-11 11.76-11C39 10 44 15.13 44 21v3" /><path
                                      id="svg_4"
                                      data-name="svg 4"
                                      class="cls-1"
                                      d="M11.62 24h41.25v29.77H11.62z" /><path class="cls-1" d="M32.24 37v7" /><circle
                                      class="cls-1"
                                      cx="32.24"
                                      cy="35.5"
                                      r="1.5" />
                                  </svg>
                                {% when 'truck' %}
                                  <svg
                                    aria-hidden="true"
                                    focusable="false"
                                    role="presentation"
                                    class="icon icon-truck"
                                    viewBox="0 0 64 64"
                                  >
                                    <defs>
                                      <style>
                                        .cls-1 {
                                          fill: none;
                                          stroke: #000;
                                          stroke-miterlimit: 10;
                                          stroke-width: 2px
                                        }
                                      </style>
                                    </defs><path class="cls-1" d="M17 47.72H7.38V21h33.14v26.72H24.44M45.92 47.72h-5.4V34.9h17.1v12.82h-4.23M57.62 34.9l-6.41-8.56H40.52" /><circle
                                      class="cls-1"
                                      cx="20.74"
                                      cy="48.26"
                                      r="3.74" /><path class="cls-1" d="M45.92 47.73a3.82 3.82 0 1 1 0 .37v-.37" />
                                  </svg>
                              {% endcase %}
                              <span>{{ block.settings.text }}</span>
                            </span>
                          </li>
                        </ul>
                      </div>
                    {%- when 'inventory_status' -%}
                       <p class="inventory-threshold">{{ block.settings.inventory_threshold }}<p>
                      <div class="product-block product-block--sales-point" {{ block.shopify_attributes }}>
                        {%- render 'product-inventory',
                          section_id: section_id,
                          product: product,
                          current_variant: current_variant,
                          block: block
                        -%}
                      </div>
                    {%- when 'share' -%}
                      <div class="product-block" {{ block.shopify_attributes }}>
                        {%- render 'social-sharing',
                          share_title: product.title,
                          share_permalink: product.url,
                          share_image: product
                        -%}
                      </div>
                    {%- when 'trust_badge' -%}
                      <div class="product-block" {{ block.shopify_attributes }}>
                        <div
                          class="aos-animate"
                          style="max-width: {{ block.settings.trust_image.width }}px; margin: 0 auto;"
                        >
                          <div
                            class="image-wrap "
                            style="height: 0; padding-bottom: {{ 100 | divided_by: block.settings.trust_image.aspect_ratio }}%;"
                          >
                            {%- assign img_url = block.settings.trust_image
                              | img_url: '1x1'
                              | replace: '_1x1.', '_{width}x.'
                            -%}
                            <img
                              class="lazyload"
                              data-src="{{ img_url }}"
                              data-widths="[360, 540, 700, 1024]"
                              data-aspectratio="{{ block.settings.trust_image.aspect_ratio }}"
                              data-sizes="auto"
                              alt="{{ block.settings.trust_image.alt }}"
                            >
                            <noscript>
                              <img
                                class="lazyloaded"
                                src="{{ block.settings.trust_image | img_url: '540x' }}"
                                alt="{{ block.settings.trust_image.alt }}"
                              >
                            </noscript>
                          </div>
                        </div>
                      </div>
                    {%- when 'custom' -%}
                      <div class="product-block" {{ block.shopify_attributes }}>
                        {{ block.settings.code }}
                      </div>
                  {%- endcase -%}
                {%- endfor -%}
              {%- else -%}
                <div
                  data-blocks-holder
                  data-url="{{ product.url | within: collection }}"
                  data-template="{{ product.template_suffix }}"
                >
                  <div class="placeholder-content" style="min-height: 86px;"></div>
                </div>
              {%- endif -%}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  
  


  if (window.location.pathname !== '/' && !document.querySelector('body.template-index')) {
    hideStockOutVariants();
  }

// hideStockOutVariants();

  function hideStockOutVariants() {
    function waitForElem(waitFor, callback, minElements = 1, isVariable = false, timer = 10000, frequency = 25) {
      let elements = isVariable
        ? window[waitFor]
        : document.querySelectorAll(waitFor);
      if (timer <= 0) 
        return;
      



      (! isVariable && elements.length >= minElements) || (isVariable && typeof window[waitFor] !== 'undefined')
        ? callback(elements)
        : setTimeout(() => waitForElem(waitFor, callback, minElements, isVariable, timer - frequency), frequency);
    }
    
    waitForElem('inventoryInfo', (el) => {
    
      loadPDPProduct();
    }, 1, true);


    function loadPDPProduct() {
      var soldOutNode = '';
      
      waitForElem('.payment-buttons button[class*="btn btn--full add-to-cart btn--tertiary"]:not(.iia-disabled-button)', (element) => {
        if (element) {
          waitForElem('#sold-out-btn', (e) => {
            if (e) {
              e[0].style.display = 'none';

// remove 'hide' class if the variant selected is in stock
              waitForElem('div.product-block.product-block--sales-point', (el) => {
                if (el) {
                  el[0].classList.remove('hide');
                }
              });
            }
          });
        }
      });

      waitForElem('.payment-buttons button[id*="AddToCart"].iia-disabled-button', (element) => {
        if (element) {
          waitForElem('#sold-out-btn', (e) => {
            if (e) {
              e[0].style.display = 'block';

// add 'hide' class if the variant selected is not in stock
              waitForElem('div.product-block.product-block--sales-point', (el) => {
                if (el) {
                  el[0].classList.add('hide');
                }
              });
            }
          });
        }
      });

      waitForElem('.payment-buttons', (element) => {
        if (element) {
          let clonedNode = '<span id="sold-out-btn" class="btn btn--full add-to-cart btn--tertiary disabled" disabled>SOLD OUT</span>';
          document.querySelector('.payment-buttons').insertAdjacentHTML('beforebegin', clonedNode);
        }
      });

      waitForElem('.variant-input-wrap > .variant-input', (elements) => {
        setTimeout(() => {
          if (elements) {
            elements.forEach((e) => {
              if (e.children[1].classList.contains('disabled')) {
                let soldOutBtn = document.querySelector('#sold-out-btn');
                soldOutBtn.style.display = 'block';
                let b = document.querySelector('.payment-buttons').querySelector('button[type=submit]');
                b.style.display = 'none';
                document.querySelector('div.shopify-payment-button').style.display = 'none';
                waitForElem('.si-reset.si-edge-right.si-edge-top.si-rotate-270', (el) => {
                  if (document.querySelector('div.si-reset.si-edge-right.si-edge-top.si-rotate-270')) {
                    document
                      .querySelector('div.si-reset.si-edge-right.si-edge-top.si-rotate-270')
                      .firstChild
                      .style
                      .display = 'block';
                  }
                });
              }
            });
          }
        }, 2600);
      });

      let countryCode = '';
      if (Shopify.country == 'GB' || Shopify.country == 'IM' || Shopify.country == 'JE' || Shopify.country == 'GG') {
        countryCode = 'GB';
      } else {
        countryCode = 'NL';
      }
  
      var productVariantInfo = '';
      var productInfo = '';
      let inventoryInfo = window.inventoryInfo;
      let prodHandleName = {{ product.handle | json}};

      const checkInventoryStatus = (prodId, handle, code, threshold) => {
          
          const variantsLocationInfo = window.inventoryInfo[handle].data.variantLocations;
          const collectData = variantsLocationInfo.filter(item=> item.variant == prodId);
          collectData.forEach((inventory)=>{
            inventory.inventoryLocations.forEach(item=>{
              if(item.location.country == code && item.quantity<=threshold){
           
                let inventoryStatus = `<ul class="sales-points custom-sales-points">
                                        <li class="sales-point">
                                          <span class="icon-and-text">
                                            <span class="icon icon--inventory"></span>
                                            <span data-product-inventory="" data-threshold="50">Low stock - ${item.quantity} items left</span>
                                          </span>
                                        </li></ul>`;
                setTimeout(()=>{
                    if(document.querySelector('div.product-block--sales-point ul.custom-sales-points')){   
                   document.querySelector('div.product-block--sales-point ul.custom-sales-points').remove();
                 }
                    if(document.querySelector('div.product-block--sales-point ul.custom-sales-points-out-ofstock')){   
                   document.querySelector('div.product-block--sales-point ul.custom-sales-points-out-ofstock').remove();
                 }
              
                if(!document.querySelector('div.product-block--sales-point ul.custom-sales-points')){              
                    document.querySelector('div.product-block--sales-point ul:not(.custom-sales-points)').insertAdjacentHTML('beforebegin',inventoryStatus);
                    document.querySelector('div.product-block--sales-point ul + ul').style.display="none";
                 }
                },10);
              
              }else if(item.location.country == code && item.quantity>threshold){
              
                 if(document.querySelector('div.product-block--sales-point ul.custom-sales-points')){   
                   document.querySelector('div.product-block--sales-point ul.custom-sales-points').remove();
                 }
                    if(document.querySelector('div.product-block--sales-point ul.custom-sales-points-out-ofstock')){   
                   document.querySelector('div.product-block--sales-point ul.custom-sales-points-out-ofstock').remove();
                 }
                document.querySelector('div.product-block--sales-point ul').removeAttribute('style');
               
              }
            });
            
          });
      };
  

// loop through the keys of the object to retrieve the productinfo and variant info
      setTimeout(() => {
        Object.keys(inventoryInfo).forEach(function(key, index) {
          if(key == prodHandleName ){
            productVariantInfo = inventoryInfo[key];
          }
          if (key == 'product') {
            productInfo = inventoryInfo['product'];
            
          }
        });

        
        
        let locations = productVariantInfo.data.variantLocations;

// push the variant location infos into an array to match according to variant id
        let variantLocations = [];
        for (let i = 0; i < locations.length; i++) {
          variantLocations.push({inventoryLocations: locations[i].inventoryLocations, variant: locations[i].variant});
        }

        

        let loc = [];
        variantLocations.forEach((e, index) => {
     
        });

// this will add the css of 'sold-out' to all the variants that are not available based on the location and it's quantity
// if quantity is 0 based on a location the css "/" will be added
        var variantRadios = document.querySelectorAll('.variant-input > label');

        for (let i = 0; i < variantRadios.length; i++) {
          let variantDomElement = variantRadios[i];
          variantDomElement.setAttribute('id', variantLocations[i].variant);
          for (let j = 0; j < productInfo.variants.length; j++) {
            let variant = productInfo.variants[j];
            if (variant.id == variantDomElement.id) {
              let foundLocations = variantLocations.find((el) => el.variant == variant.id);
           
              for (let k = 0; k < foundLocations.inventoryLocations.length; k++) {
                let varLocation = foundLocations.inventoryLocations[k];
                if (varLocation.location.country == countryCode && varLocation.quantity == 0) {
                  variantDomElement.classList.add('disabled');
                  variantDomElement.closest('div.variant-input').classList.add('custom-sold-out-parent');
                  break;
                }
              }
            }
          }
        }

// click event handler for variants which are sold out this will handle the 'add to basket' button hide operation
        document.querySelectorAll('.variant-input-wrap > .variant-input.custom-sold-out-parent').forEach((item) => {
          item.addEventListener('click', (e) => {
            let targetPare = e.target.closest('.variant-input');
         
            if (targetPare) {
              if (targetPare.querySelector('label').classList.contains('disabled')) {
                // if (soldOutNode) {
                //   soldOutNode.style.display = 'block';
                // }
                let soldOutBtn = document.querySelector('#sold-out-btn');
                soldOutBtn.style.display = 'block';
                let b = document.querySelector('.payment-buttons').querySelector('button[type=submit]');
                b.style.display = 'none';
                document.querySelector('div.shopify-payment-button').style.display = 'none';
                let inventoryStatus = `<ul class="sales-points custom-sales-points-out-ofstock">
                                        <li class="sales-point">
                                          <span class="icon-and-text">
                                            <span class="icon icon--inventory"></span>
                                            <span data-product-inventory="" data-threshold="50">Out of stock</span>
                                          </span>
                                        </li></ul>`;
                setTimeout(()=>{
                    if(document.querySelector('div.product-block--sales-point ul.custom-sales-points')){   
                   document.querySelector('div.product-block--sales-point ul.custom-sales-points').remove();
                 }
                    if(document.querySelector('div.product-block--sales-point ul.custom-sales-points-out-ofstock')){   
                   document.querySelector('div.product-block--sales-point ul.custom-sales-points-out-ofstock').remove();
                 }
                if(!document.querySelector('div.product-block--sales-point ul.custom-sales-points-out-ofstock')){              
                    document.querySelector('div.product-block--sales-point ul:not(.custom-sales-points-out-ofstock)').insertAdjacentHTML('beforebegin',inventoryStatus);
                    document.querySelector('div.product-block--sales-point ul + ul').style.display="none";
                 }
                },10);
                setTimeout(() => {
                  let notifyPanel = document.querySelector('div.si-reset.si-edge-right.si-edge-top.si-rotate-270');
                  if (notifyPanel) {
                    notifyPanel.children[0].style.display = 'none';
                  }
                }, 20);
              }
            }
          });
        });

// click event handler for variants which are available and will handle the 'sold out' button hide operation
        document.querySelectorAll('.variant-input-wrap > .variant-input:not(.custom-sold-out-parent)').forEach((item) => {
          
          item.addEventListener('click', (e) => {
            let targetPare = e.target.closest('.variant-input');
            if (targetPare) {
              if (soldOutNode) {
                soldOutNode.style.display = 'none';
              }
              let b = document.querySelector('.payment-buttons').querySelector('button[type=submit]');
              let inventoryInfo = document.querySelector('#inventory-info-app');
              if (inventoryInfo) {
           
                inventoryInfo.style.display = 'none';
              }
              b.style.display = 'block';
              let soldOutBtn = document.querySelector('#sold-out-btn');
              soldOutBtn.style.display = 'none';
              document.querySelector('div.shopify-payment-button').style.display = 'block';
              let inStockInfo = document.querySelector('div.product-block.product-block--sales-point');
              if (inStockInfo) { // inStockInfo.classList.remove('hide');
                inStockInfo.style.display = 'block';
              }
              let notifyPanel = document.querySelector('div.si-reset.si-edge-right.si-edge-top.si-rotate-270');
              if (notifyPanel) {
                notifyPanel.children[0].style.display = 'none';
             
              }

              const prodId = targetPare.getAttribute('data-variant-id');

         
              const dataThreshold = parseInt(document.querySelector('.inventory-threshold').innerText);

              checkInventoryStatus(prodId, prodHandleName, countryCode, dataThreshold);
            }
          });
        });

         (function pollFor() {
      if (document.querySelector('body') && document.querySelector('.inventory-threshold')) {
   
        if (location.search.includes('variant')) {
          let prodId = location.search.split('?variant=')[1];
         
          waitForElem(`.variant-input[data-variant-id="${prodId}"]`, (element) => {
    
            waitForElem('#sold-out-btn', (elem) => {
        
              element[0].querySelector('label').click();
              setTimeout(() => {
                //element[0].querySelector('label').click();

              }, 1500);
            })

          })
        }else{
    
          if(document.querySelector('.variant-input input:checked')){
            document.querySelector('.variant-input input:checked + label').click();
          }
        }
      } else {
        setTimeout(pollFor, 25);
      }
    })();
      }, 1000);
    };

   


  }


</script>
